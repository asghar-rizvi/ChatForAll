<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ChatForAll | Network</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #6c5ce7;
            --primary-dark: #5649c0;
            --secondary: #00cec9;
            --dark: #1e272e;
            --darker: #1a2026;
            --light: #f5f6fa;
            --gray: #808e9b;
            --success: #00b894;
            --danger: #d63031;
            --warning: #fdcb6e;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--dark);
            color: var(--light);
            min-height: 100vh;
        }

        /* Navigation */
        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 5%;
            background-color: rgba(30, 39, 46, 0.9);
            position: fixed;
            width: 100%;
            z-index: 100;
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(128, 142, 155, 0.1);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .logo h1 {
            font-size: 1.8rem;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            font-weight: 800;
        }

        .logo i {
            font-size: 2rem;
            color: var(--primary);
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: var(--light);
            text-decoration: none;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-links a:hover {
            color: var(--secondary);
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            width: 0;
            height: 2px;
            background: var(--secondary);
            bottom: -5px;
            left: 0;
            transition: width 0.3s ease;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        .auth-buttons {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.6rem 1.5rem;
            border-radius: 30px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            font-size: 0.9rem;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(108, 92, 231, 0.3);
        }

        .btn-outline {
            background-color: transparent;
            color: var(--light);
            border: 2px solid var(--gray);
        }

        .btn-outline:hover {
            border-color: var(--secondary);
            color: var(--secondary);
            transform: translateY(-2px);
        }

        /* Main Container */
        .network-container {
            padding: 120px 5% 50px;
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Network Header */
        .network-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .network-header h2 {
            font-size: 2.5rem;
            background: linear-gradient(to right, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .network-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid rgba(128, 142, 155, 0.2);
            padding-bottom: 1rem;
        }

        .network-tab {
            padding: 0.8rem 1.5rem;
            border-radius: 30px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
        }

        .network-tab.active {
            background-color: rgba(108, 92, 231, 0.2);
            color: var(--primary);
        }

        .network-tab:not(.active):hover {
            background-color: rgba(128, 142, 155, 0.1);
        }

        .network-tab-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: var(--danger);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
        }

        /* Search Container */
        .search-container {
            position: relative;
            margin-bottom: 2rem;
        }

        .search-bar {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border-radius: 15px;
            background-color: var(--darker);
            border: 1px solid rgba(128, 142, 155, 0.2);
            color: var(--light);
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .search-bar:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
            font-size: 1.2rem;
        }

        /* Search Results Dropdown */
        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: var(--darker);
            border-radius: 0 0 15px 15px;
            max-height: 300px;
            overflow-y: auto;
            z-index: 10;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(128, 142, 155, 0.2);
            border-top: none;
            display: none;
        }

        .search-result-item {
            padding: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .search-result-item:hover {
            background-color: rgba(108, 92, 231, 0.1);
        }

        .search-result-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .search-result-info {
            flex: 1;
        }

        .search-result-name {
            font-weight: 600;
        }

        .search-result-username {
            font-size: 0.8rem;
            color: var(--gray);
        }

        .search-result-action {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            background-color: var(--primary);
            color: white;
            font-size: 0.8rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-result-action:hover {
            background-color: var(--primary-dark);
        }

        /* Friends Section */
        .friends-container {
            background-color: var(--darker);
            border-radius: 15px;
            padding: 2rem;
            margin-top: 2rem;
            border: 1px solid rgba(128, 142, 155, 0.1);
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title i {
            color: var(--primary);
        }

        .friends-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .friend-card {
            background-color: rgba(128, 142, 155, 0.05);
            border-radius: 10px;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(128, 142, 155, 0.1);
        }

        .friend-card:hover {
            background-color: rgba(108, 92, 231, 0.1);
            border-color: rgba(108, 92, 231, 0.3);
            transform: translateY(-3px);
        }

        .friend-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            flex-shrink: 0;
        }

        .friend-info {
            flex: 1;
        }

        .friend-name {
            font-weight: 600;
            margin-bottom: 0.2rem;
        }

        .friend-status {
            font-size: 0.8rem;
            color: var(--gray);
            display: flex;
            align-items: center;
            gap: 0.3rem;
        }

        .status-online {
            color: var(--success);
        }

        .status-offline {
            color: var(--gray);
        }

        .status-away {
            color: var(--warning);
        }

        .friend-actions {
            display: flex;
            gap: 0.5rem;
        }

        .friend-btn {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            background-color: rgba(128, 142, 155, 0.1);
            color: var(--light);
        }

        .friend-btn:hover {
            transform: scale(1.1);
            background-color: var(--danger);
            color: white;
        }

        /* Friend Requests Section */
        .requests-container {
            background-color: var(--darker);
            border-radius: 15px;
            padding: 2rem;
            margin-top: 2rem;
            border: 1px solid rgba(128, 142, 155, 0.1);
        }

        .requests-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .request-card {
            background-color: rgba(128, 142, 155, 0.05);
            border-radius: 10px;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(128, 142, 155, 0.1);
        }

        .request-card:hover {
            background-color: rgba(108, 92, 231, 0.1);
            border-color: rgba(108, 92, 231, 0.3);
            transform: translateY(-3px);
        }

        .request-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            flex-shrink: 0;
        }

        .request-info {
            flex: 1;
        }

        .request-name {
            font-weight: 600;
            margin-bottom: 0.2rem;
        }

        .request-meta {
            font-size: 0.8rem;
            color: var(--gray);
        }

        .request-actions {
            display: flex;
            gap: 0.5rem;
        }

        .request-btn {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .request-btn.accept {
            background-color: var(--success);
            color: white;
        }

        .request-btn.decline {
            background-color: rgba(128, 142, 155, 0.1);
            color: var(--light);
        }

        .request-btn:hover {
            transform: scale(1.1);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--gray);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: rgba(128, 142, 155, 0.3);
        }

        .empty-state p {
            font-size: 1.1rem;
        }

        /* Toast Notifications */
        .toast-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .toast-notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast-success {
            background-color: var(--success);
        }

        .toast-error {
            background-color: var(--danger);
        }

        .toast-info {
            background-color: var(--primary);
}
        /* Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                transform: translateY(-10px);
            }
        }

        @keyframes slideOutRight {
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        @keyframes slideOutLeft {
            to {
                transform: translateX(-100%);
                opacity: 0;
            }
        }

        /* Floating Elements */
        .floating-element {
            position: absolute;
            border-radius: 50%;
            background: rgba(108, 92, 231, 0.1);
            filter: blur(60px);
            z-index: -1;
        }

        .floating-element-1 {
            width: 400px;
            height: 400px;
            top: -100px;
            right: -100px;
        }

        .floating-element-2 {
            width: 300px;
            height: 300px;
            bottom: -50px;
            left: -50px;
            background: rgba(0, 206, 201, 0.1);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .network-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .network-tabs {
                overflow-x: auto;
                padding-bottom: 0.5rem;
                scrollbar-width: none;
            }

            .network-tabs::-webkit-scrollbar {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav>
        <div class="logo">
            <i class="fas fa-comment-dots"></i>
            <h1>ChatForAll</h1>
        </div>
        <div class="nav-links">
            <a href="/chat">Home</a>
            <a href="/chat">Chat</a>
            <a href="/network" class="active">Network</a>
            <a href="/settings">Settings</a>
        </div>
        <div class="auth-buttons">
            <div class="user-avatar-mini" style="width: 40px; height: 40px; border-radius: 50%; background-color: var(--primary); display: flex; align-items: center; justify-content: center; cursor: pointer;">
                <img src="<%= user.profileImage %>" alt="User" style="width: 36px; height: 36px; border-radius: 50%; object-fit: cover;">
            </div>
        </div>
    </nav>

    <!-- Floating Background Elements -->
    <div class="floating-element floating-element-1"></div>
    <div class="floating-element floating-element-2"></div>

    <!-- Main Container -->
    <div class="network-container">
        <!-- Network Header -->
        <div class="network-header">
            <h2>Your Network</h2>
            <div class="network-tabs">
                <div class="network-tab active">Friends</div>
                <div class="network-tab">
                    Friend Requests
                    <div class="network-tab-badge" id="requestsBadge"><%= pendingRequestsCount || 0 %></div>
                </div>
            </div>
        </div>

        <!-- Search Container -->
        <div class="search-container">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="search-bar" placeholder="Search friends or requests..." id="searchInput">
            <div class="search-results" id="searchResults"></div>
        </div>

        <!-- Friends Section -->
        <div class="friends-container" id="friendsContainer">
            <h3 class="section-title">
                <i class="fas fa-user-friends"></i>
                Your Friends
            </h3>
            <div class="friends-grid" id="friendsGrid">
                <% if (friends && friends.length > 0) { %>
                    <% friends.forEach(friend => { %>
                        <div class="friend-card" data-friend-id="<%= friend._id %>">
                            <img src="<%= friend.avatar || 'https://randomuser.me/api/portraits/men/1.jpg' %>" alt="<%= friend.username %>" class="friend-avatar">
                            <div class="friend-info">
                                <div class="friend-name"><%= friend.fullName || friend.username %></div>
                                <div class="friend-status status-online">
                                    <i class="fas fa-circle"></i>
                                    <span>Online</span>
                                </div>
                            </div>
                            <div class="friend-actions">
                                <button class="friend-btn" title="Remove friend">
                                    <i class="fas fa-user-minus"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state" id="friendsEmptyState">
                        <i class="fas fa-user-friends"></i>
                        <p>You don't have any friends yet</p>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Friend Requests Section -->
        <div class="requests-container" id="requestsContainer">
            <h3 class="section-title">
                <i class="fas fa-user-clock"></i>
                Friend Requests
            </h3>
            <div class="requests-grid" id="requestsGrid">
                <% if (pendingRequests && pendingRequests.length > 0) { %>
                    <% pendingRequests.forEach(request => { %>
                        <div class="request-card" data-request-id="<%= request._id %>">
                            <img src="<%= request.avatar || 'https://randomuser.me/api/portraits/men/1.jpg' %>" alt="<%= request.username %>" class="request-avatar">
                            <div class="request-info">
                                <div class="request-name"><%= request.fullName || request.username %></div>
                                <div class="request-meta">Sent request</div>
                            </div>
                            <div class="request-actions">
                                <button class="request-btn accept" title="Accept">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button class="request-btn decline" title="Decline">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state" id="requestsEmptyState">
                        <i class="fas fa-inbox"></i>
                        <p>No pending friend requests</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const friendsGrid = document.getElementById('friendsGrid');
    const requestsGrid = document.getElementById('requestsGrid');
    const friendsEmptyState = document.getElementById('friendsEmptyState');
    const requestsEmptyState = document.getElementById('requestsEmptyState');
    const requestsBadge = document.getElementById('requestsBadge');
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const tabs = document.querySelectorAll('.network-tab');
    const friendsContainer = document.getElementById('friendsContainer');
    const requestsContainer = document.getElementById('requestsContainer');

    // Current user ID from server-side
    const currentUserId = '<%= user._id %>';
    let searchTimeout;

    // Initialize the app
    async function initApp() {
        setupEventListeners();
        showFriendsTab();
        await refreshFriendData(); // Initial data load
    }

    // Setup event listeners
    function setupEventListeners() {
        // Tab switching
        tabs.forEach(tab => {
            tab.addEventListener('click', function() {
                tabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                if (this.textContent.includes('Friends')) {
                    showFriendsTab();
                } else {
                    showRequestsTab();
                }
            });
        });
        
        // Search functionality with debounce
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            const query = this.value.trim();
            
            if (query.length > 0) {
                searchTimeout = setTimeout(() => {
                    searchUsers(query);
                }, 300);
            } else {
                hideSearchResults();
            }
        });
        
        // Click outside to hide search results
        document.addEventListener('click', function(e) {
            if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
                hideSearchResults();
            }
        });
        
        // Friend removal
        friendsGrid.addEventListener('click', function(e) {
            const removeBtn = e.target.closest('.friend-btn');
            if (removeBtn) {
                const friendCard = removeBtn.closest('.friend-card');
                const friendId = friendCard.dataset.friendId;
                removeFriend(friendId, friendCard);
            }
        });
        
        // Request actions
        requestsGrid.addEventListener('click', function(e) {
            const acceptBtn = e.target.closest('.request-btn.accept');
            const declineBtn = e.target.closest('.request-btn.decline');
            const requestCard = (acceptBtn || declineBtn)?.closest('.request-card');
            
            if (!requestCard) return;
            
            const requestId = requestCard.dataset.requestId;
            
            if (acceptBtn) {
                acceptRequest(requestId, requestCard);
            } else if (declineBtn) {
                declineRequest(requestId, requestCard);
            }
        });
    }

    // Refresh friend data from server
    async function refreshFriendData() {
        try {
            const response = await fetch('/network/friends', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (!response.ok) throw new Error('Failed to fetch friend data');
            
            const data = await response.json();
            updateUI(data);
        } catch (error) {
            console.error('Error refreshing friend data:', error);
            showToast('Failed to update friend data', 'error');
        }
    }

    // Update UI with fresh data
    function updateUI(data) {
        // Update friends list
        if (data.friends && data.friends.length > 0) {
            friendsEmptyState.style.display = 'none';
            friendsGrid.innerHTML = data.friends.map(friend => `
                <div class="friend-card" data-friend-id="${friend._id}">
                    <img src="${friend.avatar || 'https://randomuser.me/api/portraits/men/1.jpg'}" 
                         alt="${friend.username}" class="friend-avatar">
                    <div class="friend-info">
                        <div class="friend-name">${friend.fullName || friend.username}</div>
                        <div class="friend-status status-online">
                            <i class="fas fa-circle"></i>
                            <span>Online</span>
                        </div>
                    </div>
                    <div class="friend-actions">
                        <button class="friend-btn" title="Remove friend">
                            <i class="fas fa-user-minus"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            friendsEmptyState.style.display = 'block';
            friendsGrid.innerHTML = '';
        }

        // Update requests list
        if (data.pendingRequests && data.pendingRequests.length > 0) {
            requestsEmptyState.style.display = 'none';
            requestsGrid.innerHTML = data.pendingRequests.map(request => `
                <div class="request-card" data-request-id="${request._id}">
                    <img src="${request.avatar || 'https://randomuser.me/api/portraits/men/1.jpg'}" 
                         alt="${request.username}" class="request-avatar">
                    <div class="request-info">
                        <div class="request-name">${request.fullName || request.username}</div>
                        <div class="request-meta">Sent request</div>
                    </div>
                    <div class="request-actions">
                        <button class="request-btn accept" title="Accept">
                            <i class="fas fa-check"></i>
                        </button>
                        <button class="request-btn decline" title="Decline">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `).join('');
        } else {
            requestsEmptyState.style.display = 'block';
            requestsGrid.innerHTML = '';
        }

        // Update requests badge
        if (data.pendingRequests) {
            const pendingCount = data.pendingRequests.length;
            requestsBadge.textContent = pendingCount;
            requestsBadge.style.display = pendingCount > 0 ? 'flex' : 'none';
        }
    }

    // Show friends tab
    function showFriendsTab() {
        friendsContainer.style.display = 'block';
        requestsContainer.style.display = 'none';
        searchInput.placeholder = 'Search friends...';
        hideSearchResults();
    }

    // Show requests tab
    function showRequestsTab() {
        friendsContainer.style.display = 'none';
        requestsContainer.style.display = 'block';
        searchInput.placeholder = 'Search requests...';
        hideSearchResults();
    }

    // Search users function
    async function searchUsers(query) {
        try {
            const response = await fetch(`/network/search?q=${encodeURIComponent(query)}`, {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });
            
            if (!response.ok) throw new Error('Search failed');
            
            const data = await response.json();
            showSearchResults(data);
        } catch (error) {
            console.error('Search error:', error);
            showSearchResults([]);
        }
    }

    // Display search results
    function showSearchResults(users) {
        searchResults.innerHTML = '';
        
        if (users.length === 0) {
            const noResults = document.createElement('div');
            noResults.className = 'search-result-item';
            noResults.textContent = 'No users found';
            searchResults.appendChild(noResults);
        } else {
            users.forEach(user => {
                const resultItem = document.createElement('div');
                resultItem.className = 'search-result-item';
                resultItem.innerHTML = `
                    <img src="${user.avatar || 'https://randomuser.me/api/portraits/men/1.jpg'}" 
                         alt="${user.username}" class="search-result-avatar">
                    <div class="search-result-info">
                        <div class="search-result-name">${user.fullName || user.username}</div>
                        <div class="search-result-username">@${user.username}</div>
                    </div>
                    <button class="search-result-action" data-user-id="${user._id}">
                        Add Friend
                    </button>
                `;
                searchResults.appendChild(resultItem);
            });
            
            // Add event listeners to action buttons
            document.querySelectorAll('.search-result-action').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const userId = this.dataset.userId;
                    sendFriendRequest(userId, this);
                });
            });
        }
        
        searchResults.style.display = 'block';
    }

    // Hide search results
    function hideSearchResults() {
        searchResults.style.display = 'none';
    }

    // Send friend request
    async function sendFriendRequest(userId, button) {
        try {
            // Show loading state
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            button.disabled = true;
            
            const response = await fetch('/network/send-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ userId })
            });
            
            if (!response.ok) throw new Error('Failed to send request');
            
            const data = await response.json();
            
            button.innerHTML = '<i class="fas fa-check"></i> Sent';
            setTimeout(() => {
                hideSearchResults();
                searchInput.value = '';
                refreshFriendData(); // Refresh data after successful request
            }, 1000);
            
            showToast(`Friend request sent to ${data.targetUser.username}`, 'success');
        } catch (error) {
            console.error('Error sending request:', error);
            button.innerHTML = 'Add Friend';
            button.disabled = false;
            showToast('Failed to send friend request', 'error');
        }
    }

    // Remove friend function
    async function removeFriend(friendId, cardElement) {
        try {
            // Show loading state
            const btn = cardElement.querySelector('.friend-btn');
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            btn.style.pointerEvents = 'none';
            
            const response = await fetch('/network/remove-friend', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ userId: friendId })
            });
            
            if (!response.ok) throw new Error('Failed to remove friend');
            
            const data = await response.json();
            
            // Remove from UI
            cardElement.style.animation = 'fadeOut 0.3s forwards';
            setTimeout(() => {
                cardElement.remove();
                
                // Check if empty
                if (friendsGrid.querySelectorAll('.friend-card').length === 0) {
                    friendsEmptyState.style.display = 'block';
                }
            }, 300);
            
            showToast(`Removed ${data.removedFriend.username} from friends`, 'success');
        } catch (error) {
            console.error('Error removing friend:', error);
            btn.innerHTML = '<i class="fas fa-user-minus"></i>';
            btn.style.pointerEvents = 'auto';
            showToast('Failed to remove friend', 'error');
        }
    }

    // Accept friend request
    async function acceptRequest(requestId, cardElement) {
        try {
            // Show loading state
            const acceptBtn = cardElement.querySelector('.accept');
            acceptBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            acceptBtn.style.pointerEvents = 'none';
            
            const response = await fetch('/network/accept-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ userId: requestId })
            });
            
            if (!response.ok) throw new Error('Failed to accept request');
            
            const data = await response.json();
            
            // Update UI
            cardElement.style.animation = 'slideOutRight 0.3s forwards';
            setTimeout(() => {
                cardElement.remove();
                
                // Update requests count
                const currentCount = parseInt(requestsBadge.textContent);
                requestsBadge.textContent = currentCount - 1;
                if (currentCount - 1 <= 0) {
                    requestsBadge.style.display = 'none';
                }
                
                // Check if empty
                if (requestsGrid.querySelectorAll('.request-card').length === 0) {
                    requestsEmptyState.style.display = 'block';
                }
            }, 300);
            
            // Add to friends list
            if (friendsContainer.style.display !== 'none') {
                const newFriendElement = document.createElement('div');
                newFriendElement.className = 'friend-card';
                newFriendElement.dataset.friendId = data.newFriend._id;
                newFriendElement.innerHTML = `
                    <img src="${data.newFriend.avatar || 'https://randomuser.me/api/portraits/men/1.jpg'}" 
                         alt="${data.newFriend.username}" class="friend-avatar">
                    <div class="friend-info">
                        <div class="friend-name">${data.newFriend.fullName || data.newFriend.username}</div>
                        <div class="friend-status status-online">
                            <i class="fas fa-circle"></i>
                            <span>Online</span>
                        </div>
                    </div>
                    <div class="friend-actions">
                        <button class="friend-btn" title="Remove friend">
                            <i class="fas fa-user-minus"></i>
                        </button>
                    </div>
                `;
                
                friendsGrid.prepend(newFriendElement);
                friendsEmptyState.style.display = 'none';
            }
            
            showToast(`You are now friends with ${data.newFriend.username}`, 'success');
        } catch (error) {
            console.error('Error accepting request:', error);
            acceptBtn.innerHTML = '<i class="fas fa-check"></i>';
            acceptBtn.style.pointerEvents = 'auto';
            showToast('Failed to accept friend request', 'error');
        }
    }

    // Decline friend request
    async function declineRequest(requestId, cardElement) {
        try {
            // Show loading state
            const declineBtn = cardElement.querySelector('.decline');
            declineBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            declineBtn.style.pointerEvents = 'none';
            
            const response = await fetch('/network/decline-request', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ userId: requestId })
            });
            
            if (!response.ok) throw new Error('Failed to decline request');
            
            const data = await response.json();
            
            // Update UI
            cardElement.style.animation = 'slideOutLeft 0.3s forwards';
            setTimeout(() => {
                cardElement.remove();
                
                // Update requests count
                const currentCount = parseInt(requestsBadge.textContent);
                requestsBadge.textContent = currentCount - 1;
                if (currentCount - 1 <= 0) {
                    requestsBadge.style.display = 'none';
                }
                
                // Check if empty
                if (requestsGrid.querySelectorAll('.request-card').length === 0) {
                    requestsEmptyState.style.display = 'block';
                }
            }, 300);
            
            showToast(`Declined request from ${data.declinedUser.username}`, 'success');
        } catch (error) {
            console.error('Error declining request:', error);
            declineBtn.innerHTML = '<i class="fas fa-times"></i>';
            declineBtn.style.pointerEvents = 'auto';
            showToast('Failed to decline friend request', 'error');
        }
    }

    // Show toast notification
    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }, 100);
    }

    // Initialize the app
    initApp();
});
    </script>
</body>
</html>